var Modal = ReactBootstrap.Modal;
var Button = ReactBootstrap.Button;
var Navbar = ReactBootstrap.Navbar;
var Nav = ReactBootstrap.Nav;
var NavItem= ReactBootstrap.NavItem;
var MenuItem= ReactBootstrap.MenuItem;
var NavDropdown= ReactBootstrap.NavDropdown;
var Col = ReactBootstrap.Col;
var Row= ReactBootstrap.Row;
var Grid = ReactBootstrap.Grid;
var ButtonGroup = ReactBootstrap.ButtonGroup;

var Game = React.createClass({
  getInitialState: function() {
    return {
      length: 100,
      height: 50,
      speed: 100,
      board: [],
      playPause: "Pause",
      menuCollapse: "collapse navbar-collapse",
      generationCount: 0,
      color: "red",
      showModal: true
    }
  },
  componentDidMount: function() {
    this.setState({
      board: this.createRandomBoard()
    });
    this.play();
  },

  plusGeneration: function() {
    var nextGen = this.state.generationCount + 1;
    return nextGen;
  },

  createRandomBoard: function() {
    var board = [];
    for (let i = 0; i < this.state.height; i++) {
      var row = [];
      for (let x = 0; x < this.state.length; x++) {
        row.push(Math.floor(Math.random() * 2));
      }
      board.push(row);
    }
    return board;
  },
  clearBoard: function() {
    var board = [];
    for (let i = 0; i < this.state.height; i++) {
      var row = [];
      for (let x = 0; x < this.state.length; x++) {
        row.push(0);
      }
      board.push(row);
    }
    return board;
  },
  handleClearBoard: function() {
    this.setState({
      board: this.clearBoard(),
      generationCount: 0
    })
  },
  handleRandom: function() {
    this.setState({
      board: this.createRandomBoard(),
      generationCount: 0
    })
  },
  nextBoard: function() {
    var nextBoard = [];
    for (var i = 0; i < this.state.height; i++) {
      var nextRow = [];
      for (var x = 0; x < this.state.length; x++) {
        var nextCell = this.nextCell(this.state.board[i][x], i, x);
        nextRow.push(nextCell);
      }
      nextBoard.push(nextRow);
    }
    return nextBoard;
  },
  nextCell: function(state, i, x) {
    var neighborCount = this.neighborCount(i, x);
    let num = 0;
    if (state > 0 && (neighborCount === 2 || neighborCount === 3)) {
      num = 2;
    } else if (state === 0 && neighborCount === 3) {
      num = 1;
    } else {
      num = 0;
    }
    return num
  },

  neighborCount: function(i, x) {
    var score = 0
    if (this.state.board[i][this.fix(x + 1, this.state.length)] > 0) score++;
    if (this.state.board[i][this.fix(x - 1, this.state.length)] > 0) score++;
    if (this.state.board[this.fix(i + 1, this.state.height)][x] > 0) score++;
    if (this.state.board[this.fix(i + 1, this.state.height)][this.fix(x + 1, this.state.length)] > 0) score++;
    if (this.state.board[this.fix(i + 1, this.state.height)][this.fix(x - 1, this.state.length)] > 0) score++;
    if (this.state.board[this.fix(i - 1, this.state.height)][x] > 0) score++;
    if (this.state.board[this.fix(i - 1, this.state.height)][this.fix(x + 1, this.state.length)] > 0) score++;
    if (this.state.board[this.fix(i - 1, this.state.height)][this.fix(x - 1, this.state.length)] > 0) score++;
    return score;
  },
  fix: function(num, roc) {
    var fixed = ((num % roc) + roc) % roc;
    return fixed;
  },
  advanceBoard: function() {
    this.setState({
      board: this.nextBoard(),
      generationCount: this.plusGeneration()
    })
  },
  pause: function() {
    clearInterval(this.state.timer);
  },
  play: function() {
    this.setState({
      timer: setInterval(this.advanceBoard, this.state.speed)
    })
  },
  speedChange: function(speed) {
    clearInterval(this.state.timer);
    if (this.state.playPause === "Pause") {
      this.setState({
        timer: setInterval(this.advanceBoard, speed),
        speed: speed
      })
    } else {
      this.setState({
        speed: speed
      })
    }
  },
  menuOpenClose: function() {
    if (this.state.menuCollapse === "collapse navbar-collapse") {
      this.setState({
        menuCollapse: "navbar-collapse"
      })
    } else {
      this.setState({
        menuCollapse: "collapse navbar-collapse"
      })
    }
  },
  sizeChange: function(width, height) {
    this.setState({
      length: width,
      height: height,
    })
    setTimeout(this.handleRandom)
  },
  handlePlayPause: function() {
    if (this.state.playPause === "Play") {
      this.play();
      this.setState({
        playPause: "Pause"
      })
    } else {
      this.pause();
      this.setState({
        playPause: "Play"
      })
    }
  },
  boardChange: function(newBoard) {
    this.setState({
      board: newBoard
    })
  },
  closeModal: function(){
    this.setState({
      showModal: false
    })
  },
  showModal: function(){
    this.setState({
      showModal: true
    })
  },
  render: function() {
    return (
      <Col xs={12}>
        <Modal show={this.state.showModal} onHide={this.closeModal}>
            <Modal.Header closeButton>
              <Modal.Title>Conway's Game of Life
            </Modal.Title>
              </Modal.Header>
            <Modal.Body>
              <p>Welcome to the Game of Life! Light colored cells are new, dark cells are old. Click the board at anytime to add an alive cell. For more Information on Conway's Game of Life please click The link below. Enjoy!</p>
            </Modal.Body>
            <Modal.Footer>
              <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank"><Button  bsStyle="info" bsSize="large">More Info</Button></a>
              <Button  bsStyle="primary" bsSize="large" onClick={this.closeModal}>Continue!</Button>
              </Modal.Footer>
              </Modal>
        
        
        <Navbar>
            <Navbar.Header>
              <Navbar.Brand>
                <a href="#">Generation: {this.state.generationCount}</a>
            </Navbar.Brand>
               <Navbar.Toggle />
              </Navbar.Header>
            <Navbar.Collapse>
              <Nav pullRight>
                <NavItem onClick={this.handlePlayPause}>{this.state.playPause}</NavItem>
                <NavItem onClick={this.handleRandom}>Random</NavItem>
                <NavItem onClick={this.handleClearBoard}>Clear</NavItem>
                <NavDropdown title="Speed">
                    <MenuItem onClick={()=>this.speedChange(50)} href="#">Fast</MenuItem>
                    <MenuItem onClick={()=>this.speedChange(100)} href="#">Medium</MenuItem>
                    <MenuItem onClick={()=>this.speedChange(500)} href="#">Slow</MenuItem>
                </NavDropdown>
                <NavDropdown title="Size">
                    <MenuItem onClick={()=>this.sizeChange(120,70)} href="#">Large</MenuItem>
                    <MenuItem onClick={()=>this.sizeChange(100,50)} href="#">Medium</MenuItem>
                    <MenuItem onClick={()=>this.sizeChange(50,30)} href="#">Small</MenuItem>
                </NavDropdown>
                <NavItem onClick={this.showModal} data-target="#infoModal">Info</NavItem>  
        </Nav>
              </Navbar.Collapse>
              </Navbar>
        <Grid>
          <Row>
            <Col  xs={12}><h1>Game of Life</h1></Col>
          </Row>
          <Row>
            <Col className="board" xs={12}>
        <GameBoard onClick={this.boardChange} xs={12} board={this.state.board} />
            </Col>
          </Row>
          <Row xs={12} className="Btn-Group">
            <ButtonGroup> 
        <Button onClick={this.handlePlayPause} bsStyle="primary">{this.state.playPause}</Button>
        <Button onClick={this.handleRandom} bsStyle="danger">Random</Button>
              <Button onClick={this.handleClearBoard} bsStyle="warning">Clear</Button>
            </ButtonGroup>
          </Row>
        </Grid>
        <Col className="footer">
          <p>Page designed and coded by Joe Anderson</p>
        </Col>
      </Col>
    )
  }
});

var GameBoard = React.createClass({
  handleClick: function(row, col, event) {
    var ChangedBoard = this.props.board;
    ChangedBoard[row][col] = 1;
    this.props.onClick(ChangedBoard);
  },
  render: function() {
    var rows = this.props.board.map(function(rowStats, index) {
      return (
        <GameRow onClick={this.handleClick.bind(null)} row={index} rowStats={rowStats}/>
      )
    }.bind(this));
    return (
      <div className="rows">{rows}</div>
    )
  }
});

var GameRow = React.createClass({
  handleClick: function(col, event) {
    this.props.onClick(this.props.row, col)
  },
  render: function() {
    var cells = this.props.rowStats.map(function(cellStat, index) {
      return (
        <Cell onClick={this.handleClick.bind(null,index)} col={index} cellStat={cellStat}/>
      )
    }.bind(this));
    return (
      <div className="rows">{cells}</div>
    )
  }
});

var Cell = React.createClass({
  render: function() {
    if (this.props.cellStat === 0) return (<div onClick={this.props.onClick} className="cell dead"></div>);
    if (this.props.cellStat === 1) return (<div onClick={this.props.onClick} className="cell young"></div>);
    if (this.props.cellStat === 2) return (<div onClick={this.props.onClick} className="cell old"></div>);
  }
});

React.render(<Game />, document.getElementById("myDiv"));

